@using IThubSAT.Data.Models
@using IThubSAT.Data
@inject SurveyService SurveyService

<div class="tool_bar">
  <div class="search_bars">
    <input type="text" class="search_bar" placeholder="Группа/Подгруппа" name="searchGroupInWorkload" @bind-value=_groupFilter/>
    <input type="select" class="search_bar" placeholder="Дисциплина" name="searchDisciplineInWorkload" @bind-value=_disciplineFilter/>
    <input type="text" class="search_bar" placeholder= "Преподаватель" name="searchTeacherInWorkload" @bind-value=_teacherFilter/>
  </div>
  <!-- <button class="button">Edit</button> -->
  <button class="primary_button">Экспорт</button>
  <!-- <button class="button">Delete</button> -->
</div>
<div class="table_wrapper">
  @if (_workload != null) {
    <table class="table is-fullwidth">
      <tr>
        <th>Группа</th>
        <th>Дисциплина</th>
        <th>Преподаватель</th>
        <th>Часы в неделю</th>
        <th>Часы всего</th>
      </tr>
      @if (_workload.Count > 0){
        @foreach (var workloadRow in _workload) {
          <tr>
            <td>@workloadRow.Group.Name</td>
            <td>@workloadRow.Discipline.Name</td>
            <td>@workloadRow.Teacher.FirstName</td>
            <td>@workloadRow.WeeklyHours</td>
            <td>@workloadRow.TotalHours</td>
          </tr>
        }
      }
      else {
        <tr>
          <td>Пока нет вообще никакой нагрузки</td>
        </tr>
      }
    </table>
    <button class="add_workload_row">+</button>
  }
  else {
    
  }
</div>

@code {
  [Parameter] public Survey Survey { get; set; } = null!;
  private Group? _groupFilter { get; set; }
  private Discipline? _disciplineFilter { get; set; }
  private Teacher? _teacherFilter { get; set; }
  private List<Workload>? _workload { get; set; }
  protected async override Task OnInitializedAsync()
  {
    _workload = await SurveyService.GetWorkloadBySurveyId(Survey.Id);
    await base.OnInitializedAsync();
  }
}