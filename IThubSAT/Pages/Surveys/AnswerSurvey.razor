@page "/surveys/{SurveyId:int}/answer"
@using IThubSAT.Components
@using IThubSAT.Data.Models
@using IThubSAT.Data
@inject SurveyService SurveyService

@if (_survey is not null) {
    <TopBar PageName="@(_survey.Name ?? string.Empty)" Username="User"/>
    <div class="main-content">
        <div class="answer-survey-content">
            <div class="cur-section-wrapper">
                    @if (_survey!.IsOpen) {
                        @if (_curStepNumber == -1) {
                            <p class="section-name">Choose group</p>
                            // здесь надо переделать нормально
                            <select @bind=@_selectedGroupId @bind:after="@(() => OnGroupChange())">
                                @foreach (Group group in allGroups) {
                                    <option value="@group.Id">@group.Name</option>
                                }
                            </select>
                        }
                        else {
                            @if (_workloads.Count > 0) {
                                <p class="section-name">@_workloads[_curStepNumber].Discipline.Name</p>
                                <div class="attendance-checkbox">
                                    <div class="checkbox"></div>
                                    <p>Я не ходил(-а) на этот предмет</p>
                                </div>
                                <div class="answer-survey-questions">
                                    @foreach (var question in filteredQuestions) {
                                        <AnswerSurveyQuestion Question=question/>
                                    }
                                </div>
                            }
                            else {
                                <SurveyAnswerError ErrorText="По вашей группе нет данных, обратитесь к администратору" />
                            }
                        }
                    }
                    else {
                        <SurveyAnswerError ErrorText="Мы сейчас не принимаем ответы на этот опрос :(" />
                    }
                }            
                <div class="bottom-navigation">
                    <button @onclick=@(()=>ChangeDiscipline(_curStepNumber - 1))>Назад</button>
                    <button @onclick=@(()=>ChangeDiscipline(_curStepNumber + 1))>Вперёд</button>
                </div>
            </div>
        </div>
    </div>
}
else {
    <SurveyAnswerError ErrorText="Такого опроса не нашли :(" /> 
    @* отправлять из сервиса ошибку именно? *@
}

@code {
    [Parameter] public int SurveyId { get; set; }
    private SurveyEntry _surveyEntry = new();
    private Survey? _survey;

    protected List<Group> allGroups = new();
    private int _selectedGroupId = -1;

    private int _curStepNumber = -1;
    private List<Workload> _workloads = new();
    protected List<Question> allQuestions = new();
    protected List<Question> filteredQuestions = new();

    private void ChangeDiscipline(int newIndex)
    {
        if (newIndex < -1 || newIndex >= _workloads.Count) {
            return;
        }
        else {
            _curStepNumber = newIndex;
            OnDisciplineChange();
            StateHasChanged();
        }
    }

    private void OnDisciplineChange()
    {
        filteredQuestions = allQuestions.Where(q => q.DisciplineType == _workloads[_curStepNumber].Discipline.DisciplineType).ToList();
        // получать нужные вопросы (возможно слишком много лишних действий, тк отфильтровывать вопросы понадобится только типа, 2 раза)
        // по крайней мере проверять, не поменялся ли тип дисциплины
    }

    private async void OnGroupChange()
    {
        Console.WriteLine(_selectedGroupId);
        _workloads = await SurveyService.GetWorkloadsBySurveyIdAndStudyGroupId(SurveyId, _selectedGroupId) ?? new();
        Console.WriteLine(_workloads.Count);
    }

    protected async override Task OnInitializedAsync()
    {
        _survey = await SurveyService.GetSurveyByIdAsync(SurveyId);
        _surveyEntry.Survey = _survey!;

        allGroups = await SurveyService.GetGroupsBySurveyId(SurveyId);

        allQuestions = await SurveyService.GetQuestionsBySurveyId(SurveyId) ?? allQuestions;

        await base.OnInitializedAsync();
    }
}