@page "/"
@using IThubSAT.Components
@using IThubSAT.Components.Surveys
@using IThubSAT.Data
@using IThubSAT.Data.Models
@using System.Linq
@inject SurveyService SurveyService

<TopBar PageName="Главная" Username="User"/>
<div class="main-content">
    <div class="white-background-content">
        <div class="tool-bar">
            @* TODO: Не работает обновление списка на ввод текста, только на смену вкладки. Скорее всего проблема с рендером *@
            @* Пока не делаю потому что заёбно и бесполезно, вкладок достаточно *@
            @* <input type="text" class="search-bar" @bind-value=@_searchBarText @bind-value:event="oninput" @bind:after="@(() => FindSurveys())"/> *@
            @* <SearchBar Search=@text SearchChanged=@SearchChanged/> *@
            <button class="primary-button" @onclick=@AddSurvey>
                Создать +
            </button>
        </div>

        <TabsBar Tabs=Tabs OnTabChosen=OnTabChosen />

        <div class="tab-content surveys-list">
            @if(_filteredSurveys.Count > 0){
                @foreach(var survey in _filteredSurveys)
                {
                    <SurveyListItem Survey=@survey />
                }
            }
            else {
                <p>Здесь ничего нет...</p>
            }
        </div>
    </div>
</div>

@code {
    protected List<Survey> _surveys = new List<Survey>();
    private string text = string.Empty;
    protected List<Survey> _filteredSurveys = new();

    protected override void OnInitialized()
    {
        _surveys = SurveyService.GetSurveys();
        OnTabChosen(Tabs[0]);
        base.OnInitialized();
    }

    List<Tab> Tabs = new() { Tab.Active, Tab.Stopped, Tab.Drafts, Tab.All };
    public void OnTabChosen (Tab chosenTab) {
        _filteredSurveys = chosenTab switch 
        {
            Tab.Active => _surveys.Where(s => s.IsOpen == true).ToList(),
            Tab.Stopped => _surveys.Where(s => (s.IsOpen == false) & (s.EndDate != string.Empty)).ToList(),
            Tab.Drafts => _surveys.Where(s => (s.IsOpen == false) & (s.StartDate != string.Empty)).ToList(),
            Tab.All => _surveys,
            _ => _surveys
        };
    }
    private async void AddSurvey()
    {
        await SurveyService.CreateSurveyAsync(new Survey() {
            Id = 1,
            Name = "СОП", 
            Description="СОП СОП СОП", 
            CreatedAt="", 
            ModifiedAt="", 
            StartDate="", 
            EndDate="", 
            CreatedBy=SurveyService.GetSingleUser()
        });
    }

    @* protected void SearchChanged(string searchText)
    {
        text = searchText;
        _filteredSurveys = _filteredSurveys.Where(s => s.Name.Contains(text)).ToList();
    } *@
}